Parte 1: Entendendo fetch()
Quest√£o 1: O que o fetch() faz?
üìå Explique com suas pr√≥prias palavras o que a fun√ß√£o fetch() faz no JavaScript.

üí° Dica:

Pense no fetch() como um mensageiro que busca informa√ß√µes de um servidor.

Ele retorna uma promessa e precisa ser tratado com .then().

----------------------------------------------------------------------------------------------------------

Quest√£o 2: Como transformar a resposta da API em JSON?
üìå Ao fazer uma requisi√ß√£o com fetch(), a resposta n√£o vem diretamente em JSON. Como podemos convert√™-la?

üí° Dica:

Use .then(response => response.json()) para transformar a resposta.

Teste no console do navegador:

fetch('https://jsonplaceholder.typicode.com/users')
  .then(response => console.log(response))
  .then(data => console.log(data)); // O que acontece aqui?

----------------------------------------------------------------------------------------------------------


Quest√£o 3: Manipulando dados da API
üìå O c√≥digo abaixo busca uma lista de usu√°rios. Como podemos modificar o console.log para exibir apenas os nomes dos usu√°rios?


fetch('https://jsonplaceholder.typicode.com/users')
  .then(response => response.json())
  .then(data => console.log(data)); // Como exibir s√≥ os nomes?

üí° Dica:

O que data representa? Tente console.log(typeof data).

Use data.forEach(usuario => console.log(usuario.name)).

----------------------------------------------------------------------------------------------------------


Parte 2: Exibindo dados no HTML
Quest√£o 4: Criando um espa√ßo no HTML para os dados
üìå Se queremos exibir os nomes dos usu√°rios na tela, qual elemento HTML podemos usar? Como acessamos esse elemento pelo JavaScript?

üí° Dica:

Podemos usar um <ul> ou <div> com um id.

Para manipular no JS, usamos document.getElementById('id_do_elemento').

----------------------------------------------------------------------------------------------------------


Quest√£o 5: Inserindo texto dinamicamente
üìå Como podemos modificar o texto de um elemento HTML a partir do JavaScript?

üí° Dica:

Crie um <p id="output"></p> no HTML.

No JS, fa√ßa document.getElementById("output").innerText = "Novo Texto";.

----------------------------------------------------------------------------------------------------------


Quest√£o 6: Exibindo dados da API na p√°gina
üìå O c√≥digo abaixo busca os usu√°rios, mas n√£o exibe nada na p√°gina. Como podemos mostrar os nomes dentro de uma <ul> com id="listaUsuarios"?

html
Copiar
Editar
<ul id="listaUsuarios"></ul>

<script>
fetch('https://jsonplaceholder.typicode.com/users')
  .then(response => response.json())
  .then(data => {
    // Como exibir os nomes na <ul>?
  });
</script>
üí° Dica:

Use data.forEach() para percorrer os usu√°rios.

Crie um <li> para cada nome e adicione √† <ul>.

Use document.getElementById("listaUsuarios").innerHTML += ...

----------------------------------------------------------------------------------------------------------


Compara√ß√£o fetch() com .then() vs async/await
Exemplo 1: Obtendo dados da API

üîπ Usando .then()
fetch('https://jsonplaceholder.typicode.com/users')
  .then(response => response.json()) // Converte a resposta para JSON
  .then(data => console.log(data)) // Exibe os dados no console
  .catch(error => console.error('Erro ao buscar os dados:', error));

üîπ Usando async/await
async function carregarUsuarios() {
    try {
        let response = await fetch('https://jsonplaceholder.typicode.com/users'); // Espera a resposta
        let data = await response.json(); // Converte para JSON
        console.log(data); // Exibe os dados no console
    } catch (error) {
        console.error('Erro ao buscar os dados:', error);
    }
}

carregarUsuarios();
üí° Diferen√ßas principais:

.then() encadeia promessas.

async/await usa await para esperar cada etapa antes de continuar.

try/catch √© usado com async/await para capturar erros, enquanto .catch() √© usado no .then().

Exemplo 2: Exibindo os dados na tela

üîπ Usando .then()
function carregarUsuarios() {
    fetch('https://jsonplaceholder.typicode.com/users')
        .then(response => response.json())
        .then(data => {
            let lista = document.getElementById("listaUsuarios");
            lista.innerHTML = ""; // Limpa a lista antes de adicionar novos itens
            data.forEach(usuario => {
                let item = document.createElement("li");
                item.textContent = usuario.name;
                lista.appendChild(item);
            });
        })
        .catch(error => console.error("Erro ao carregar os usu√°rios:", error));
}

üîπ Usando async/await
js
Copiar
Editar
async function carregarUsuarios() {
    try {
        let response = await fetch('https://jsonplaceholder.typicode.com/users');
        let data = await response.json();
        
        let lista = document.getElementById("listaUsuarios");
        lista.innerHTML = ""; // Limpa a lista antes de adicionar novos itens
        data.forEach(usuario => {
            let item = document.createElement("li");
            item.textContent = usuario.name;
            lista.appendChild(item);
        });
    } catch (error) {
        console.error("Erro ao carregar os usu√°rios:", error);
    }
}


üí° Pontos importantes:

Ambas as vers√µes fazem a mesma coisa: buscam usu√°rios e os adicionam √† <ul>.

Com async/await, o c√≥digo fica mais linear e f√°cil de ler.

O try/catch facilita o tratamento de erros.

Exemplo 3: Criando um bot√£o para carregar usu√°rios
Agora, um exemplo completo no HTML para testar ambas as vers√µes:

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compara√ß√£o Fetch</title>
</head>
<body>

    <h1>Lista de Usu√°rios</h1>
    <button onclick="carregarUsuarios()">Carregar Usu√°rios</button>
    <ul id="listaUsuarios"></ul>

    <script>
        async function carregarUsuarios() {
            try {
                let response = await fetch('https://jsonplaceholder.typicode.com/users');
                let data = await response.json();
                
                let lista = document.getElementById("listaUsuarios");
                lista.innerHTML = "";
                data.forEach(usuario => {
                    let item = document.createElement("li");
                    item.textContent = usuario.name;
                    lista.appendChild(item);
                });
            } catch (error) {
                console.error("Erro ao carregar os usu√°rios:", error);
            }
        }
    </script>

</body>
</html>

Conclus√£o
.then() funciona bem, mas pode ficar confuso quando h√° muitas etapas.

async/await torna o c√≥digo mais organizado e parecido com um c√≥digo s√≠ncrono.

Ambos t√™m o mesmo desempenho e fazem a mesma coisa; a escolha depende de prefer√™ncia e legibilidade.